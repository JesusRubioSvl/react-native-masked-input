{"version":3,"sources":["text-input-mask.tsx"],"names":["TextInput","Platform","BaseTextComponent","React","TextInputMask","constructor","props","maskedText","rawText","onChangeText","_trySetNativeProps","_handleFocus","bind","_handleBlur","_inputElement","createRef","_onChangeText","getElement","text","_checkText","updateValue","setContent","e","_maskHandler","handleBlur","value","options","onBlur","handleFocus","onFocus","element","current","setNativeProps","error","checkText","_getKeyboardType","keyboardType","getKeyboardType","render","Input","customTextInputProps","customTextInput","OS","getDisplayValueFor"],"mappings":"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","sourcesContent":["import {\n  TextInput,\n  Platform,\n  NativeSyntheticEvent,\n  TextInputFocusEventData,\n  KeyboardTypeOptions,\n} from 'react-native';\nimport BaseTextComponent from './base-text-component';\nimport type { TextInputMaskProps, ValueType } from '../index';\nimport type { ReactText, RefObject } from 'react';\nimport React from 'react';\n\nexport default class TextInputMask extends BaseTextComponent<\n  TextInputMaskProps\n> {\n  _inputElement!: RefObject<TextInput>;\n\n  constructor(props: TextInputMaskProps) {\n    super(props);\n\n    this._handleFocus = this._handleFocus.bind(this);\n    this._handleBlur = this._handleBlur.bind(this);\n    this._inputElement = React.createRef<TextInput>();\n    this._onChangeText = this._onChangeText.bind(this);\n  }\n\n  getElement() {\n    return this._inputElement;\n  }\n\n  setContent = (maskedText: ReactText, rawText: number) => {\n    if (this.props.onChangeText) {\n      this._trySetNativeProps(maskedText);\n      this.props.onChangeText(maskedText, rawText);\n    }\n  };\n\n  _onChangeText(text: string) {\n    if (!this._checkText(text)) {\n      return;\n    }\n\n    const { maskedText, rawText } = this.updateValue(text);\n\n    this.setContent(maskedText, rawText);\n  }\n\n  _handleBlur(e: NativeSyntheticEvent<TextInputFocusEventData>) {\n    if (this._maskHandler.handleBlur) {\n      const { maskedText, rawText } = this._maskHandler.handleBlur(\n        this.props.value,\n        this.props.options\n      );\n\n      this.setContent(maskedText, rawText);\n    }\n\n    if (this.props.onBlur) {\n      this.props.onBlur(e);\n    }\n  }\n\n  _handleFocus(e: NativeSyntheticEvent<TextInputFocusEventData>) {\n    if (this._maskHandler.handleFocus) {\n      const { maskedText, rawText } = this._maskHandler.handleFocus(\n        this.props.value,\n        this.props.options\n      );\n      this.setContent(maskedText, rawText);\n    }\n\n    if (this.props.onFocus) {\n      this.props.onFocus(e);\n    }\n  }\n\n  _trySetNativeProps(maskedText: ValueType) {\n    try {\n      const element = this.getElement();\n\n      element.current?.setNativeProps &&\n        element.current.setNativeProps({ text: maskedText });\n    } catch (error) {\n      // silent\n    }\n  }\n\n  _checkText(text: ValueType) {\n    if (this.props.checkText) {\n      return this.props.checkText(this.props.value, text);\n    }\n\n    return true;\n  }\n\n  _getKeyboardType() {\n    return (\n      this.props.keyboardType ||\n      (this._maskHandler.getKeyboardType\n        ? this._maskHandler.getKeyboardType()\n        : 'default')\n    );\n  }\n\n  render() {\n    let Input = TextInput;\n    let customTextInputProps = {};\n\n    if (this.props.customTextInput) {\n      Input = this.props.customTextInput;\n      customTextInputProps = this.props.customTextInputProps || {};\n    }\n\n    return (\n      <Input\n        ref={this._inputElement}\n        keyboardType={\n          (Platform.OS !== 'web'\n            ? this._getKeyboardType()\n            : 'default') as KeyboardTypeOptions\n        }\n        {...this.props}\n        {...customTextInputProps}\n        onFocus={this._handleFocus}\n        onBlur={this._handleBlur}\n        onChangeText={this._onChangeText}\n        value={this.getDisplayValueFor(this.props.value)}\n      />\n    );\n  }\n}\n"]}