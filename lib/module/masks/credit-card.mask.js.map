{"version":3,"sources":["credit-card.mask.js"],"names":["cardTypes","BaseMask","CustomMask","defaultType","type","gaps","lengths","MASK_TRANSLATION","val","CreditCardMask","getType","getValue","value","settings","shared","mask","getMask","translation","validate","getCardType","includes","length","getRawValue","maskedValue","split","map","trim","Math","max","g","i","firstGap","lastGap","Array","from","_","obfuscated","join"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,MAAMC,WAAW,GAAG;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,CAAzB;AAAqCC,EAAAA,OAAO,EAAE,CAAC,EAAD;AAA9C,CAApB;AAEA,MAAMC,gBAAgB,GAAG;AACvB,OAAMC,GAAD,IAAS;AADS,CAAzB;AAIA,eAAe,MAAMC,cAAN,SAA6BR,QAA7B,CAAsC;AACnD,SAAOS,OAAP,GAAiB;AACf,WAAO,aAAP;AACD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACxB,WAAOX,UAAU,CAACY,MAAX,CAAkBH,QAAlB,CAA2BC,KAA3B,EAAkC;AACvCG,MAAAA,IAAI,EAAE,KAAKC,OAAL,CAAaJ,KAAb,EAAoBC,QAApB,CADiC;AAEvCI,MAAAA,WAAW,EAAEV;AAF0B,KAAlC,CAAP;AAID;;AAEDW,EAAAA,QAAQ,CAACN,KAAD,EAAQ;AACd,QAAIA,KAAJ,EAAW;AACT,YAAMR,IAAI,GAAG,KAAKe,WAAL,CAAiBP,KAAjB,CAAb;AACA,aAAOR,IAAI,CAACE,OAAL,CAAac,QAAb,CAAsBR,KAAK,CAACS,MAA5B,CAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAEDC,EAAAA,WAAW,CAACC,WAAD,EAAcV,QAAd,EAAwB;AACjC,QAAI,CAACU,WAAL,EAAkB,OAAO,EAAP;AAElB,WAAOA,WAAW,CAACC,KAAZ,CAAkB,GAAlB,EAAuBC,GAAvB,CAA4BjB,GAAD,IAAS;AACzC,UAAI,CAACA,GAAL,EAAU,OAAO,EAAP;AAEV,aAAOA,GAAG,CAACkB,IAAJ,EAAP;AACD,KAJM,CAAP;AAKD;;AAEDV,EAAAA,OAAO,CAACJ,KAAD,EAAQC,QAAQ,GAAG,EAAnB,EAAuB;AAC5B,UAAMT,IAAI,GAAG,KAAKe,WAAL,CAAiBP,KAAjB,CAAb;AACA,UAAMS,MAAM,GAAGM,IAAI,CAACC,GAAL,CAAS,GAAGxB,IAAI,CAACE,OAAjB,CAAf;AACA,UAAMD,IAAI,GAAGD,IAAI,CAACC,IAAL,CAAUoB,GAAV,CAAc,CAACI,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA5B,CAAb;AAEA,UAAMC,QAAQ,GAAG1B,IAAI,CAAC,CAAD,CAArB;AACA,UAAM2B,OAAO,GAAG3B,IAAI,CAACA,IAAI,CAACgB,MAAL,GAAc,CAAf,CAApB;AACA,WAAOY,KAAK,CAACC,IAAN,CAAW,IAAID,KAAJ,CAAUZ,MAAM,GAAGhB,IAAI,CAACgB,MAAxB,CAAX,EACJI,GADI,CACA,CAACU,CAAD,EAAIL,CAAJ,KAAU;AACb,UAAIzB,IAAI,CAACe,QAAL,CAAcU,CAAd,CAAJ,EAAsB,OAAO,GAAP;AACtB,UAAIjB,QAAQ,CAACuB,UAAT,IAAuBN,CAAC,GAAGC,QAA3B,IAAuCD,CAAC,GAAGE,OAA/C,EAAwD,OAAO,GAAP;AACxD,aAAO,CAAP;AACD,KALI,EAMJK,IANI,CAMC,EAND,CAAP;AAOD;;AAEDlB,EAAAA,WAAW,CAACP,KAAD,EAAQ;AACjB,WAAOZ,SAAS,CAACY,KAAD,CAAT,CAAiB,CAAjB,KAAuBT,WAA9B;AACD;;AAjDkD","sourcesContent":["import cardTypes from 'credit-card-type';\nimport BaseMask from './_base.mask';\nimport CustomMask from './custom.mask';\n\nconst defaultType = { type: 'default', gaps: [4, 8, 12], lengths: [16] };\n\nconst MASK_TRANSLATION = {\n  '*': (val) => '*',\n};\n\nexport default class CreditCardMask extends BaseMask {\n  static getType() {\n    return 'credit-card';\n  }\n\n  getValue(value, settings) {\n    return CustomMask.shared.getValue(value, {\n      mask: this.getMask(value, settings),\n      translation: MASK_TRANSLATION,\n    });\n  }\n\n  validate(value) {\n    if (value) {\n      const type = this.getCardType(value);\n      return type.lengths.includes(value.length);\n    }\n\n    return true;\n  }\n\n  getRawValue(maskedValue, settings) {\n    if (!maskedValue) return [];\n\n    return maskedValue.split(' ').map((val) => {\n      if (!val) return '';\n\n      return val.trim();\n    });\n  }\n\n  getMask(value, settings = {}) {\n    const type = this.getCardType(value);\n    const length = Math.max(...type.lengths);\n    const gaps = type.gaps.map((g, i) => g + i);\n\n    const firstGap = gaps[0];\n    const lastGap = gaps[gaps.length - 1];\n    return Array.from(new Array(length + gaps.length))\n      .map((_, i) => {\n        if (gaps.includes(i)) return ' ';\n        if (settings.obfuscated && i > firstGap && i < lastGap) return '*';\n        return 9;\n      })\n      .join('');\n  }\n\n  getCardType(value) {\n    return cardTypes(value)[0] || defaultType;\n  }\n}\n"]}