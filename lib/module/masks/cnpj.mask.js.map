{"version":3,"sources":["cnpj.mask.js"],"names":["BaseMask","CustomMask","CNPJ_MASK","validateCnpj","cnpj","valida","dig1","dig2","i","exp","toString","replace","digito","parseInt","charAt","length","customMaskOptions","mask","CnpjMask","getType","getValue","value","settings","shared","getRawValue","maskedValue","removeNotNumbers","validate","isEmpty","trim","getMask"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,OAAO,MAAMC,SAAS,GAAG,oBAAlB;AAEP,OAAO,MAAMC,YAAY,GAAIC,IAAD,IAAU;AACpC,MAAIC,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,CAAb;AACA,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,CAAJ;AAEA,MAAIC,GAAG,GAAG,OAAV;AACAL,EAAAA,IAAI,GAAGA,IAAI,CAACM,QAAL,GAAgBC,OAAhB,CAAwBF,GAAxB,EAA6B,EAA7B,CAAP;AACA,MAAIG,MAAM,GAAGC,QAAQ,CAACT,IAAI,CAACU,MAAL,CAAY,EAAZ,IAAkBV,IAAI,CAACU,MAAL,CAAY,EAAZ,CAAnB,EAAoC,EAApC,CAArB;;AAEA,OAAKN,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,MAAM,CAACU,MAAvB,EAA+BP,CAAC,EAAhC,EAAoC;AAClCF,IAAAA,IAAI,IAAIE,CAAC,GAAG,CAAJ,GAAQJ,IAAI,CAACU,MAAL,CAAYN,CAAC,GAAG,CAAhB,IAAqBH,MAAM,CAACG,CAAD,CAAnC,GAAyC,CAAjD;AACAD,IAAAA,IAAI,IAAIH,IAAI,CAACU,MAAL,CAAYN,CAAZ,IAAiBH,MAAM,CAACG,CAAD,CAA/B;AACD;;AACDF,EAAAA,IAAI,GAAGA,IAAI,GAAG,EAAP,GAAY,CAAZ,GAAgB,CAAhB,GAAoB,KAAMA,IAAI,GAAG,EAAxC;AACAC,EAAAA,IAAI,GAAGA,IAAI,GAAG,EAAP,GAAY,CAAZ,GAAgB,CAAhB,GAAoB,KAAMA,IAAI,GAAG,EAAxC;AAEA,SAAOD,IAAI,GAAG,EAAP,GAAYC,IAAZ,KAAqBK,MAA5B;AACD,CAlBM;AAoBP,MAAMI,iBAAiB,GAAG;AAAEC,EAAAA,IAAI,EAAEf;AAAR,CAA1B;AAEA,eAAe,MAAMgB,QAAN,SAAuBlB,QAAvB,CAAgC;AAC7C,SAAOmB,OAAP,GAAiB;AACf,WAAO,MAAP;AACD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACxB,WAAOrB,UAAU,CAACsB,MAAX,CAAkBH,QAAlB,CAA2BC,KAA3B,EAAkCL,iBAAlC,CAAP;AACD;;AAEDQ,EAAAA,WAAW,CAACC,WAAD,EAAcH,QAAd,EAAwB;AACjC,WAAO,MAAMI,gBAAN,CAAuBD,WAAvB,CAAP;AACD;;AAEDE,EAAAA,QAAQ,CAACN,KAAD,EAAQC,QAAR,EAAkB;AACxB,QAAIM,OAAO,GAAG,CAACP,KAAK,IAAI,EAAV,EAAcQ,IAAd,GAAqBd,MAArB,KAAgC,CAA9C;AACA,WAAO,CAACa,OAAD,IAAYzB,YAAY,CAACkB,KAAD,CAA/B;AACD;;AAEDS,EAAAA,OAAO,CAACT,KAAD,EAAQC,QAAR,EAAkB;AACvB,WAAOpB,SAAP;AACD;;AApB4C","sourcesContent":["import BaseMask from './_base.mask';\nimport CustomMask from './custom.mask';\n\nexport const CNPJ_MASK = '99.999.999/9999-99';\n\nexport const validateCnpj = (cnpj) => {\n  var valida = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\n  var dig1 = 0;\n  var dig2 = 0;\n  var i;\n\n  var exp = /\\.\\//g;\n  cnpj = cnpj.toString().replace(exp, '');\n  var digito = parseInt(cnpj.charAt(12) + cnpj.charAt(13), 10);\n\n  for (i = 0; i < valida.length; i++) {\n    dig1 += i > 0 ? cnpj.charAt(i - 1) * valida[i] : 0;\n    dig2 += cnpj.charAt(i) * valida[i];\n  }\n  dig1 = dig1 % 11 < 2 ? 0 : 11 - (dig1 % 11);\n  dig2 = dig2 % 11 < 2 ? 0 : 11 - (dig2 % 11);\n\n  return dig1 * 10 + dig2 === digito;\n};\n\nconst customMaskOptions = { mask: CNPJ_MASK };\n\nexport default class CnpjMask extends BaseMask {\n  static getType() {\n    return 'cnpj';\n  }\n\n  getValue(value, settings) {\n    return CustomMask.shared.getValue(value, customMaskOptions);\n  }\n\n  getRawValue(maskedValue, settings) {\n    return super.removeNotNumbers(maskedValue);\n  }\n\n  validate(value, settings) {\n    var isEmpty = (value || '').trim().length === 0;\n    return !isEmpty && validateCnpj(value);\n  }\n\n  getMask(value, settings) {\n    return CNPJ_MASK;\n  }\n}\n"]}