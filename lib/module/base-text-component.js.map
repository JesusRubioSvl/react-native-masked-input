{"version":3,"sources":["base-text-component.ts"],"names":["PureComponent","MaskResolver","BaseTextComponent","constructor","props","_resolveMaskHandler","componentDidMount","_bindProps","componentDidUpdate","prevProps","updateValue","text","maskedText","_getMaskedValue","rawText","getRawValueFor","isValid","_maskHandler","validate","_getDefaultValue","value","_getOptions","getRawValue","options","_mustUpdateValue","newValue","resolve","type","nextProps","_getDefaultMaskedValue","defaultValue","getValue","undefined"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAQA,eAAe,MAAMC,iBAAN,SAELF,aAFK,CAEY;AAEzBG,EAAAA,WAAW,CAACC,KAAD,EAAW;AACpB,UAAMA,KAAN;;AADoB;;AAEpB,SAAKC,mBAAL;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL,CAAgB,KAAKH,KAArB;AACD;;AAEDI,EAAAA,kBAAkB,CAACC,SAAD,EAAe;AAC/B,SAAKF,UAAL,CAAgBE,SAAhB;AACD;;AAEDC,EAAAA,WAAW,CAACC,IAAD,EAAyC;AAClD,QAAIC,UAAU,GAAG,KAAKC,eAAL,CAAqBF,IAArB,CAAjB;;AACA,UAAMG,OAAO,GAAG,KAAKC,cAAL,CAAoBH,UAApB,CAAhB;AAEA,WAAO;AACLA,MAAAA,UADK;AAELE,MAAAA;AAFK,KAAP;AAID;;AAEDE,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKC,YAAL,CAAkBC,QAAlB,CACL,KAAKC,gBAAL,CAAsB,KAAKf,KAAL,CAAWgB,KAAjC,CADK,EAEL,KAAKC,WAAL,EAFK,CAAP;AAID;;AAEDN,EAAAA,cAAc,CAACK,KAAD,EAAmB;AAC/B,WAAO,KAAKH,YAAL,CAAkBK,WAAlB,CACL,KAAKH,gBAAL,CAAsBC,KAAtB,CADK,EAEL,KAAKC,WAAL,EAFK,CAAP;AAID;;AAEDC,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKP,cAAL,CAAoB,KAAKX,KAAL,CAAWgB,KAA/B,CAAP;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKjB,KAAL,CAAWmB,OAAlB;AACD;;AAEDC,EAAAA,gBAAgB,CAACC,QAAD,EAAsB;AACpC,WAAO,KAAKrB,KAAL,CAAWgB,KAAX,KAAqBK,QAA5B;AACD;;AAEDpB,EAAAA,mBAAmB,GAAG;AACpB,SAAKY,YAAL,GAAoBhB,YAAY,CAACyB,OAAb,CAAqB,KAAKtB,KAAL,CAAWuB,IAAhC,CAApB;AACD;;AAEDpB,EAAAA,UAAU,CAACqB,SAAD,EAAe;AACvB,QAAI,KAAKxB,KAAL,CAAWuB,IAAX,KAAoBC,SAAS,CAACD,IAAlC,EAAwC;AACtC,WAAKtB,mBAAL;AACD;AACF;;AAEDwB,EAAAA,sBAAsB,CAACT,KAAD,EAAmB;AACvC,QAAI,KAAKD,gBAAL,CAAsBC,KAAtB,MAAiC,EAArC,EAAyC;AACvC,aAAO,EAAP;AACD;;AAED,WAAO,KAAKP,eAAL,CAAqBO,KAArB,CAAP;AACD;;AAEDP,EAAAA,eAAe,CAACO,KAAD,EAAmB;AAChC,UAAMU,YAAY,GAAG,KAAKX,gBAAL,CAAsBC,KAAtB,CAArB;;AACA,QAAIU,YAAY,KAAK,EAArB,EAAyB;AACvB,aAAO,EAAP;AACD;;AAED,WAAO,KAAKb,YAAL,CAAkBc,QAAlB,CAA2BD,YAA3B,EAAyC,KAAKT,WAAL,EAAzC,CAAP;AACD;;AAEDF,EAAAA,gBAAgB,CAACC,KAAD,EAAmB;AACjC,QAAIA,KAAK,KAAKY,SAAV,IAAuBZ,KAAK,KAAK,IAArC,EAA2C;AACzC,aAAO,EAAP;AACD;;AAED,WAAOA,KAAP;AACD;;AApFwB","sourcesContent":["import { PureComponent } from 'react';\nimport MaskResolver from './mask-resolver';\nimport type {\n  MaskHandlerInterface,\n  MaskHandlerReturnType,\n  TextInputMaskProps,\n  ValueType,\n} from './types';\n\nexport default class BaseTextComponent<\n  T extends TextInputMaskProps\n> extends PureComponent<T> {\n  _maskHandler!: MaskHandlerInterface<any>;\n  constructor(props: T) {\n    super(props);\n    this._resolveMaskHandler();\n  }\n\n  componentDidMount() {\n    this._bindProps(this.props);\n  }\n\n  componentDidUpdate(prevProps: T) {\n    this._bindProps(prevProps);\n  }\n\n  updateValue(text: ValueType): MaskHandlerReturnType {\n    let maskedText = this._getMaskedValue(text);\n    const rawText = this.getRawValueFor(maskedText);\n\n    return {\n      maskedText,\n      rawText,\n    };\n  }\n\n  isValid() {\n    return this._maskHandler.validate(\n      this._getDefaultValue(this.props.value as any),\n      this._getOptions()\n    );\n  }\n\n  getRawValueFor(value: ValueType) {\n    return this._maskHandler.getRawValue(\n      this._getDefaultValue(value),\n      this._getOptions()\n    );\n  }\n\n  getRawValue() {\n    return this.getRawValueFor(this.props.value as any);\n  }\n\n  _getOptions() {\n    return this.props.options;\n  }\n\n  _mustUpdateValue(newValue: ValueType) {\n    return this.props.value !== newValue;\n  }\n\n  _resolveMaskHandler() {\n    this._maskHandler = MaskResolver.resolve(this.props.type);\n  }\n\n  _bindProps(nextProps: T) {\n    if (this.props.type !== nextProps.type) {\n      this._resolveMaskHandler();\n    }\n  }\n\n  _getDefaultMaskedValue(value: ValueType) {\n    if (this._getDefaultValue(value) === '') {\n      return '';\n    }\n\n    return this._getMaskedValue(value);\n  }\n\n  _getMaskedValue(value: ValueType) {\n    const defaultValue = this._getDefaultValue(value);\n    if (defaultValue === '') {\n      return '';\n    }\n\n    return this._maskHandler.getValue(defaultValue, this._getOptions());\n  }\n\n  _getDefaultValue(value: ValueType) {\n    if (value === undefined || value === null) {\n      return '';\n    }\n\n    return value;\n  }\n}\n"]}