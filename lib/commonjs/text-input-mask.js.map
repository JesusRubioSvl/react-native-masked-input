{"version":3,"sources":["text-input-mask.tsx"],"names":["TextInputMask","BaseTextComponent","constructor","props","maskedText","rawText","onChangeText","_trySetNativeProps","_handleFocus","bind","_handleBlur","_inputElement","React","createRef","_onChangeText","getElement","getDisplayValueFor","value","_handleChange","text","_maskHandler","handleChange","_getOptions","updateValue","_checkText","setContent","e","handleBlur","options","onBlur","handleFocus","onFocus","element","current","setNativeProps","error","checkText","_getKeyboardType","keyboardType","getKeyboardType","render","Input","TextInput","customTextInputProps","customTextInput","Platform","OS"],"mappings":";;;;;;;AAAA;;AAOA;;AAOA;;;;;;;;AAEe,MAAMA,aAAN,SAELC,0BAFK,CAE0C;AAGvDC,EAAAA,WAAW,CAACC,KAAD,EAAqC;AAC9C,UAAMA,KAAN;;AAD8C;;AAAA,wCAanC,CAACC,UAAD,EAAwBC,OAAxB,KAA4C;AACvD,UAAI,KAAKF,KAAL,CAAWG,YAAf,EAA6B;AAC3B,aAAKC,kBAAL,CAAwBH,UAAxB;;AACA,aAAKD,KAAL,CAAWG,YAAX,CAAwBF,UAAxB,EAAoCC,OAApC;AACD;AACF,KAlB+C;;AAG9C,SAAKG,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,aAAL,gBAAqBC,eAAMC,SAAN,EAArB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBL,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AAEDM,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKJ,aAAZ;AACD;;AASDK,EAAAA,kBAAkB,CAACC,KAAD,EAAmB;AACnC,WAAO,KAAKC,aAAL,CAAmBD,KAAnB,EAA0Bb,UAAjC;AACD;;AAEDc,EAAAA,aAAa,CAACC,IAAD,EAAkB;AAC7B,WAAO,KAAKC,YAAL,CAAkBC,YAAlB,GACH,KAAKD,YAAL,CAAkBC,YAAlB,CAA+BF,IAA/B,EAAqC,KAAKG,WAAL,EAArC,CADG,GAEH,KAAKC,WAAL,CAAiBJ,IAAjB,CAFJ;AAGD;;AAEDL,EAAAA,aAAa,CAACK,IAAD,EAAe;AAC1B,QAAI,CAAC,KAAKK,UAAL,CAAgBL,IAAhB,CAAL,EAA4B;AAC1B;AACD;;AAED,UAAM;AAAEf,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA0B,KAAKa,aAAL,CAAmBC,IAAnB,CAAhC;;AAEA,SAAKM,UAAL,CAAgBrB,UAAhB,EAA4BC,OAA5B;AACD;;AAEDK,EAAAA,WAAW,CAACgB,CAAD,EAAmD;AAC5D,QAAI,KAAKN,YAAL,CAAkBO,UAAtB,EAAkC;AAChC,YAAM;AAAEvB,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAA0B,KAAKe,YAAL,CAAkBO,UAAlB,CAC9B,KAAKxB,KAAL,CAAWc,KADmB,EAE9B,KAAKd,KAAL,CAAWyB,OAFmB,CAAhC;;AAKA,WAAKH,UAAL,CAAgBrB,UAAhB,EAA4BC,OAA5B;AACD;;AAED,QAAI,KAAKF,KAAL,CAAW0B,MAAf,EAAuB;AACrB,WAAK1B,KAAL,CAAW0B,MAAX,CAAkBH,CAAlB;AACD;AACF;;AAEDlB,EAAAA,YAAY,CAACkB,CAAD,EAAmD;AAC7D,QAAI,KAAKN,YAAL,CAAkBU,WAAtB,EAAmC;AACjC,YAAM;AAAE1B,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAA0B,KAAKe,YAAL,CAAkBU,WAAlB,CAC9B,KAAK3B,KAAL,CAAWc,KADmB,EAE9B,KAAKd,KAAL,CAAWyB,OAFmB,CAAhC;;AAIA,WAAKH,UAAL,CAAgBrB,UAAhB,EAA4BC,OAA5B;AACD;;AAED,QAAI,KAAKF,KAAL,CAAW4B,OAAf,EAAwB;AACtB,WAAK5B,KAAL,CAAW4B,OAAX,CAAmBL,CAAnB;AACD;AACF;;AAEDnB,EAAAA,kBAAkB,CAACH,UAAD,EAAwB;AACxC,QAAI;AAAA;;AACF,YAAM4B,OAAO,GAAG,KAAKjB,UAAL,EAAhB;AAEA,2BAAAiB,OAAO,CAACC,OAAR,sEAAiBC,cAAjB,KACEF,OAAO,CAACC,OAAR,CAAgBC,cAAhB,CAA+B;AAAEf,QAAAA,IAAI,EAAEf;AAAR,OAA/B,CADF;AAED,KALD,CAKE,OAAO+B,KAAP,EAAc,CACd;AACD;AACF;;AAEDX,EAAAA,UAAU,CAACL,IAAD,EAAkB;AAC1B,QAAI,KAAKhB,KAAL,CAAWiC,SAAf,EAA0B;AACxB,aAAO,KAAKjC,KAAL,CAAWiC,SAAX,CAAqB,KAAKjC,KAAL,CAAWc,KAAhC,EAAuCE,IAAvC,CAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAEDkB,EAAAA,gBAAgB,GAAG;AACjB,WACE,KAAKlC,KAAL,CAAWmC,YAAX,KACC,KAAKlB,YAAL,CAAkBmB,eAAlB,GACG,KAAKnB,YAAL,CAAkBmB,eAAlB,EADH,GAEG,SAHJ,CADF;AAMD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAIC,KAAK,GAAGC,sBAAZ;AACA,QAAIC,oBAAoB,GAAG,EAA3B;;AAEA,QAAI,KAAKxC,KAAL,CAAWyC,eAAf,EAAgC;AAC9BH,MAAAA,KAAK,GAAG,KAAKtC,KAAL,CAAWyC,eAAnB;AACAD,MAAAA,oBAAoB,GAAG,KAAKxC,KAAL,CAAWwC,oBAAX,IAAmC,EAA1D;AACD;;AAED,wBACE,6BAAC,KAAD;AACE,MAAA,GAAG,EAAE,KAAKhC,aADZ;AAEE,MAAA,YAAY,EACTkC,sBAASC,EAAT,KAAgB,KAAhB,GACG,KAAKT,gBAAL,EADH,GAEG;AALR,OAOM,KAAKlC,KAPX,EAQMwC,oBARN;AASE,MAAA,OAAO,EAAE,KAAKnC,YAThB;AAUE,MAAA,MAAM,EAAE,KAAKE,WAVf;AAWE,MAAA,YAAY,EAAE,KAAKI,aAXrB;AAYE,MAAA,KAAK,EAAE,KAAKE,kBAAL,CAAwB,KAAKb,KAAL,CAAWc,KAAnC;AAZT,OADF;AAgBD;;AA7HsD","sourcesContent":["import {\n  TextInput,\n  Platform,\n  NativeSyntheticEvent,\n  TextInputFocusEventData,\n  KeyboardTypeOptions,\n} from 'react-native';\nimport BaseTextComponent from './base-text-component';\nimport type {\n  TextInputMaskProps,\n  TextInputOptionBaseInterface,\n  ValueType,\n} from '../index';\nimport type { ReactText, RefObject } from 'react';\nimport React from 'react';\n\nexport default class TextInputMask<\n  Options extends TextInputOptionBaseInterface\n> extends BaseTextComponent<TextInputMaskProps<Options>> {\n  _inputElement!: RefObject<TextInput>;\n\n  constructor(props: TextInputMaskProps<Options>) {\n    super(props);\n\n    this._handleFocus = this._handleFocus.bind(this);\n    this._handleBlur = this._handleBlur.bind(this);\n    this._inputElement = React.createRef<TextInput>();\n    this._onChangeText = this._onChangeText.bind(this);\n  }\n\n  getElement() {\n    return this._inputElement;\n  }\n\n  setContent = (maskedText: ReactText, rawText: number) => {\n    if (this.props.onChangeText) {\n      this._trySetNativeProps(maskedText);\n      this.props.onChangeText(maskedText, rawText);\n    }\n  };\n\n  getDisplayValueFor(value: ValueType) {\n    return this._handleChange(value).maskedText;\n  }\n\n  _handleChange(text: ValueType) {\n    return this._maskHandler.handleChange\n      ? this._maskHandler.handleChange(text, this._getOptions())\n      : this.updateValue(text);\n  }\n\n  _onChangeText(text: string) {\n    if (!this._checkText(text)) {\n      return;\n    }\n\n    const { maskedText, rawText } = this._handleChange(text);\n\n    this.setContent(maskedText, rawText);\n  }\n\n  _handleBlur(e: NativeSyntheticEvent<TextInputFocusEventData>) {\n    if (this._maskHandler.handleBlur) {\n      const { maskedText, rawText } = this._maskHandler.handleBlur(\n        this.props.value,\n        this.props.options\n      );\n\n      this.setContent(maskedText, rawText);\n    }\n\n    if (this.props.onBlur) {\n      this.props.onBlur(e);\n    }\n  }\n\n  _handleFocus(e: NativeSyntheticEvent<TextInputFocusEventData>) {\n    if (this._maskHandler.handleFocus) {\n      const { maskedText, rawText } = this._maskHandler.handleFocus(\n        this.props.value,\n        this.props.options\n      );\n      this.setContent(maskedText, rawText);\n    }\n\n    if (this.props.onFocus) {\n      this.props.onFocus(e);\n    }\n  }\n\n  _trySetNativeProps(maskedText: ValueType) {\n    try {\n      const element = this.getElement();\n\n      element.current?.setNativeProps &&\n        element.current.setNativeProps({ text: maskedText });\n    } catch (error) {\n      // silent\n    }\n  }\n\n  _checkText(text: ValueType) {\n    if (this.props.checkText) {\n      return this.props.checkText(this.props.value, text);\n    }\n\n    return true;\n  }\n\n  _getKeyboardType() {\n    return (\n      this.props.keyboardType ||\n      (this._maskHandler.getKeyboardType\n        ? this._maskHandler.getKeyboardType()\n        : 'default')\n    );\n  }\n\n  render() {\n    let Input = TextInput;\n    let customTextInputProps = {};\n\n    if (this.props.customTextInput) {\n      Input = this.props.customTextInput;\n      customTextInputProps = this.props.customTextInputProps || {};\n    }\n\n    return (\n      <Input\n        ref={this._inputElement}\n        keyboardType={\n          (Platform.OS !== 'web'\n            ? this._getKeyboardType()\n            : 'default') as KeyboardTypeOptions\n        }\n        {...this.props}\n        {...customTextInputProps}\n        onFocus={this._handleFocus}\n        onBlur={this._handleBlur}\n        onChangeText={this._onChangeText}\n        value={this.getDisplayValueFor(this.props.value)}\n      />\n    );\n  }\n}\n"]}