{"version":3,"sources":["vanilla-masker.js"],"names":["mergeMoneyOptions","opts","precision","hasOwnProperty","separator","delimiter","unit","suffixUnit","replace","zeroCents","lastOutput","moneyPrecision","addSeparators","value","VMasker","toMoney","toString","isNegative","includes","decimalSeparator","int","decimals","split","valueOnlyInt","includePrefix","includeNegative","formattedInt","fillWithZeroCount","length","includedZeroCents","Array","fill","join","includeDecimals","slice","data","VMaskerObject"],"mappings":"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","sourcesContent":["const mergeMoneyOptions = function (opts) {\n  opts = opts || {};\n  opts = {\n    precision: opts.hasOwnProperty('precision') ? opts.precision : 2,\n    separator: opts.separator || ',',\n    delimiter: opts.delimiter || '.',\n    unit: opts.unit ? opts.unit : '',\n    //unit: opts.unit && (opts.unit.replace(/[\\s]/g,'') + \" \") || \"\",\n    suffixUnit:\n      (opts.suffixUnit && ' ' + opts.suffixUnit.replace(/[\\s]/g, '')) || '',\n    zeroCents: opts.zeroCents,\n    lastOutput: opts.lastOutput,\n  };\n  opts.moneyPrecision = opts.zeroCents ? 0 : opts.precision;\n  return opts;\n};\n\nconst addSeparators = (value, separator = ',') => {\n  return value.replace(/\\B(?=(\\d{3})+(?!\\d))/g, separator);\n};\n\nclass VMasker {\n  toMoney(value, opts) {\n    opts = mergeMoneyOptions(opts);\n\n    if (value === '-') {\n      return '-';\n    }\n    value = value.toString();\n    const isNegative = value.includes('-');\n    const decimalSeparator = opts.delimiter;\n    const [int, decimals] = value.split('.');\n\n    const valueOnlyInt = isNegative ? int.replace('-', '') : int;\n\n    const includePrefix = opts.unit ? opts.unit : '';\n    const includeNegative = isNegative ? '-' : '';\n    const formattedInt = addSeparators(valueOnlyInt, opts.separator);\n    const fillWithZeroCount = opts.zeroCents\n      ? opts.precision - (decimals ? decimals.length : 0)\n      : 0;\n    const includedZeroCents = fillWithZeroCount\n      ? Array(fillWithZeroCount).fill(0).join('')\n      : '';\n    const includeDecimals = (value.includes('.')\n      ? `${decimalSeparator}${decimals}${includedZeroCents}`\n      : fillWithZeroCount\n      ? decimalSeparator + includedZeroCents\n      : ''\n    ).slice(0, opts.precision + 1);\n\n    let data = `${includeNegative}${includePrefix}${formattedInt}${includeDecimals}`;\n\n    return data;\n  }\n}\n\n/*VMasker.toPattern = function (value, opts) {\n  var pattern = typeof opts === 'object' ? opts.pattern : opts,\n    patternChars = pattern.replace(/\\W/g, ''),\n    output = pattern.split(''),\n    values = value.toString().replace(/\\W/g, ''),\n    charsValues = values.replace(/\\W/g, ''),\n    index = 0,\n    i,\n    outputLength = output.length,\n    placeholder = typeof opts === 'object' ? opts.placeholder : undefined;\n  for (i = 0; i < outputLength; i++) {\n    // Reached the end of input\n    if (index >= values.length) {\n      if (patternChars.length === charsValues.length) {\n        return output.join('');\n      } else if (\n        placeholder !== undefined &&\n        patternChars.length > charsValues.length\n      ) {\n        return addPlaceholdersToOutput(output, i, placeholder).join('');\n      } else {\n        break;\n      }\n    }\n    // Remaining chars in input\n    else {\n      if (\n        (output[i] === DIGIT && values[index].match(/[0-9]/)) ||\n        (output[i] === ALPHA && values[index].match(/[a-zA-Z]/)) ||\n        (output[i] === ALPHANUM && values[index].match(/[0-9a-zA-Z]/))\n      ) {\n        output[i] = values[index++];\n      } else if (\n        output[i] === DIGIT ||\n        output[i] === ALPHA ||\n        output[i] === ALPHANUM\n      ) {\n        if (placeholder !== undefined) {\n          return addPlaceholdersToOutput(output, i, placeholder).join('');\n        } else {\n          return output.slice(0, i).join('');\n        }\n      }\n    }\n  }\n  return output.join('').substr(0, i);\n};*/\n\nconst VMaskerObject = new VMasker();\n\nexport default VMaskerObject;\n"]}