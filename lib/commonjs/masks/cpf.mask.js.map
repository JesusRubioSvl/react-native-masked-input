{"version":3,"sources":["cpf.mask.js"],"names":["CPF_MASK","validateCPF","cpf","replace","isValid","sum","rest","i","length","parseInt","substring","maskOptions","mask","CpfMask","BaseMask","getType","getValue","value","settings","CustomMask","shared","getRawValue","maskedValue","removeNotNumbers","validate","isEmpty","trim","getMask"],"mappings":"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","sourcesContent":["import BaseMask from './_base.mask';\nimport CustomMask from './custom.mask';\n\nexport const CPF_MASK = '999.999.999-99';\n\nexport const validateCPF = (cpf) => {\n  if (cpf === '') {\n    return true;\n  }\n\n  cpf = cpf.replace(/\\./gi, '').replace(/-/gi, '');\n  var isValid = true;\n  var sum;\n  var rest;\n  var i;\n  i = 0;\n  sum = 0;\n\n  if (\n    cpf.length !== 11 ||\n    cpf === '00000000000' ||\n    cpf === '11111111111' ||\n    cpf === '22222222222' ||\n    cpf === '33333333333' ||\n    cpf === '44444444444' ||\n    cpf === '55555555555' ||\n    cpf === '66666666666' ||\n    cpf === '77777777777' ||\n    cpf === '88888888888' ||\n    cpf === '99999999999'\n  ) {\n    isValid = false;\n  }\n\n  for (i = 1; i <= 9; i++) {\n    sum = sum + parseInt(cpf.substring(i - 1, i), 10) * (11 - i);\n  }\n\n  rest = (sum * 10) % 11;\n\n  if (rest === 10 || rest === 11) {\n    rest = 0;\n  }\n\n  if (rest !== parseInt(cpf.substring(9, 10), 10)) {\n    isValid = false;\n  }\n\n  sum = 0;\n\n  for (i = 1; i <= 10; i++) {\n    sum = sum + parseInt(cpf.substring(i - 1, i), 10) * (12 - i);\n  }\n\n  rest = (sum * 10) % 11;\n\n  if (rest === 10 || rest === 11) {\n    rest = 0;\n  }\n  if (rest !== parseInt(cpf.substring(10, 11), 10)) {\n    isValid = false;\n  }\n\n  return isValid;\n};\n\nconst maskOptions = { mask: CPF_MASK };\n\nexport default class CpfMask extends BaseMask {\n  static getType() {\n    return 'cpf';\n  }\n\n  getValue(value, settings) {\n    return CustomMask.shared.getValue(value, maskOptions);\n  }\n\n  getRawValue(maskedValue, settings) {\n    return super.removeNotNumbers(maskedValue);\n  }\n\n  validate(value, settings) {\n    var isEmpty = (value || '').trim().length === 0;\n    return !isEmpty && validateCPF(value);\n  }\n\n  getMask(value, settings) {\n    return CPF_MASK;\n  }\n}\n"]}