{"version":3,"sources":["money.mask.js"],"names":["MONEY_MASK_SETTINGS","precision","separator","delimiter","unit","suffixUnit","MoneyMask","BaseMask","getType","getValue","value","settings","mergedSettings","mergeSettings","raw","getRawValueForMask","VanillaMasker","toMoney","handleBlur","maskedValue","opts","includeSuffix","maskedText","rawText","handleFocus","rawValue","getRawValue","replace","normalizeValue","cleaned","removeNotNumbersForMoney","toString","split","length","lastPart","pop","isLastPartDecimal","join","normalized","Number","validate","_sanitize","toFixed","_insert","text","index","string","substring"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,mBAAmB,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CADe;AAE1BC,EAAAA,SAAS,EAAE,GAFe;AAG1BC,EAAAA,SAAS,EAAE,GAHe;AAI1BC,EAAAA,IAAI,EAAE,IAJoB;AAK1BC,EAAAA,UAAU,EAAE;AALc,CAA5B;;AAQe,MAAMC,SAAN,SAAwBC,aAAxB,CAAiC;AAC9C,SAAOC,OAAP,GAAiB;AACf,WAAO,OAAP;AACD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACxB,UAAMC,cAAc,GAAG,MAAMC,aAAN,CAAoBb,mBAApB,EAAyCW,QAAzC,CAAvB;AACA,UAAMG,GAAG,GAAG,KAAKC,kBAAL,CAAwBL,KAAxB,EAA+BE,cAA/B,CAAZ,CAFwB,CAIxB;;AACA,QAAIE,GAAG,KAAK,EAAZ,EAAgB;AACd,aAAO,EAAP;AACD;;AAED,WAAOE,uBAAcC,OAAd,CAAsBH,GAAtB,EAA2BF,cAA3B,CAAP;AACD;;AAEDM,EAAAA,UAAU,CAACC,WAAD,EAAcR,QAAd,EAAwB;AAChC,UAAMS,IAAI,GAAG,MAAMP,aAAN,CAAoBb,mBAApB,EAAyCW,QAAzC,CAAb;AACA,UAAMU,aAAa,GAAGD,IAAI,CAACf,UAAL,GAAkBe,IAAI,CAACf,UAAvB,GAAoC,EAA1D;AACA,QAAI;AAAEiB,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA0B,KAAKC,WAAL,CAAiBL,WAAjB,EAA8BR,QAA9B,CAA9B;AAEAW,IAAAA,UAAU,aAAMA,UAAN,SAAmBD,aAAnB,CAAV;AAEA,WAAO;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAAP;AACD;;AAEDC,EAAAA,WAAW,CAACL,WAAD,EAAcR,QAAd,EAAwB;AACjC,QAAI,OAAOQ,WAAP,KAAuB,QAA3B,EAAqC;AACnC,aAAO;AAAEG,QAAAA,UAAU,EAAEH,WAAd;AAA2BI,QAAAA,OAAO,EAAEJ;AAApC,OAAP;AACD;;AACD,UAAMC,IAAI,GAAG,MAAMP,aAAN,CAAoBb,mBAApB,EAAyCW,QAAzC,CAAb;AAEA,UAAMc,QAAQ,GAAG,KAAKC,WAAL,CAAiBP,WAAjB,EAA8BC,IAA9B,CAAjB;AACA,WAAO;AACLE,MAAAA,UAAU,EAAEH,WAAW,CAACQ,OAAZ,CAAoBP,IAAI,CAACf,UAAzB,EAAqC,EAArC,CADP;AAELkB,MAAAA,OAAO,EAAEE;AAFJ,KAAP;AAID;;AAEDG,EAAAA,cAAc,CAACT,WAAD,EAAcR,QAAd,EAAwB;AACpC,QAAI,OAAOQ,WAAP,KAAuB,QAA3B,EAAqC;AACnC,aAAOA,WAAP;AACD;;AAED,UAAMP,cAAc,GAAG,MAAMC,aAAN,CAAoBb,mBAApB,EAAyCW,QAAzC,CAAvB;AACA,UAAMkB,OAAO,GAAG,MACbC,wBADa,CACYX,WADZ,EAEbY,QAFa,GAGbC,KAHa,CAGPpB,cAAc,CAACV,SAHR,CAAhB,CANoC,CAWpC;AACA;;AACA,QAAIU,cAAc,CAACV,SAAf,KAA6BU,cAAc,CAACT,SAAhD,EAA2D;AACzD,UAAI0B,OAAO,CAACI,MAAR,KAAmB,CAAvB,EAA0B;AACxB,eAAOJ,OAAO,CAAC,CAAD,CAAd;AACD;;AAED,YAAMK,QAAQ,GAAGL,OAAO,CAACM,GAAR,EAAjB;AACA,YAAMC,iBAAiB,GAAGF,QAAQ,CAACD,MAAT,IAAmBrB,cAAc,CAACX,SAA5D;AAEA,aAAO4B,OAAO,CAACQ,IAAR,CAAa,EAAb,KAAoBD,iBAAiB,GAAG,MAAMF,QAAT,GAAoBA,QAAzD,CAAP;AACD;;AAED,WAAOL,OAAO,CAACQ,IAAR,CAAa,EAAb,EAAiBV,OAAjB,CAAyBf,cAAc,CAACT,SAAxC,EAAmD,GAAnD,CAAP;AACD;;AAEDY,EAAAA,kBAAkB,CAACI,WAAD,EAAcR,QAAd,EAAwB;AACxC,UAAM2B,UAAU,GAAG,KAAKV,cAAL,CAAoBT,WAApB,EAAiCR,QAAjC,CAAnB;;AAEA,QAAI2B,UAAU,KAAK,EAAnB,EAAuB;AACrB,aAAO,EAAP;AACD;;AAED,WAAOA,UAAP;AACD;;AAEDZ,EAAAA,WAAW,CAACP,WAAD,EAAcR,QAAd,EAAwB;AACjC,UAAMC,cAAc,GAAG,MAAMC,aAAN,CAAoBb,mBAApB,EAAyCW,QAAzC,CAAvB;AACA,UAAM2B,UAAU,GAAG,KAAKV,cAAL,CAAoBT,WAApB,EAAiCP,cAAjC,CAAnB;AACA,WAAO2B,MAAM,CAACD,UAAD,CAAb;AACD;;AAEDE,EAAAA,QAAQ,CAAC9B,KAAD,EAAQC,QAAR,EAAkB;AACxB,WAAO,IAAP;AACD;;AAED8B,EAAAA,SAAS,CAAC/B,KAAD,EAAQC,QAAR,EAAkB;AACzB,QAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOA,KAAK,CAACgC,OAAN,CAAc/B,QAAQ,CAACV,SAAvB,CAAP;AACD;;AAED,WAAOS,KAAP;AACD;;AAEDiC,EAAAA,OAAO,CAACC,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAsB;AAC3B,QAAID,KAAK,GAAG,CAAZ,EAAe;AACb,aACED,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkBF,KAAlB,IAA2BC,MAA3B,GAAoCF,IAAI,CAACG,SAAL,CAAeF,KAAf,EAAsBD,IAAI,CAACX,MAA3B,CADtC;AAGD,KAJD,MAIO;AACL,aAAOa,MAAM,GAAGF,IAAhB;AACD;AACF;;AAvG6C","sourcesContent":["import BaseMask from './_base.mask';\nimport VanillaMasker from '../internal-dependencies/vanilla-masker';\n\nconst MONEY_MASK_SETTINGS = {\n  precision: 2,\n  separator: ',',\n  delimiter: '.',\n  unit: 'R$',\n  suffixUnit: '',\n};\n\nexport default class MoneyMask extends BaseMask {\n  static getType() {\n    return 'money';\n  }\n\n  getValue(value, settings) {\n    const mergedSettings = super.mergeSettings(MONEY_MASK_SETTINGS, settings);\n    const raw = this.getRawValueForMask(value, mergedSettings);\n\n    // empty content should return empty string\n    if (raw === '') {\n      return '';\n    }\n\n    return VanillaMasker.toMoney(raw, mergedSettings);\n  }\n\n  handleBlur(maskedValue, settings) {\n    const opts = super.mergeSettings(MONEY_MASK_SETTINGS, settings);\n    const includeSuffix = opts.suffixUnit ? opts.suffixUnit : '';\n    let { maskedText, rawText } = this.handleFocus(maskedValue, settings);\n\n    maskedText = `${maskedText}${includeSuffix}`;\n\n    return { maskedText, rawText };\n  }\n\n  handleFocus(maskedValue, settings) {\n    if (typeof maskedValue === 'number') {\n      return { maskedText: maskedValue, rawText: maskedValue };\n    }\n    const opts = super.mergeSettings(MONEY_MASK_SETTINGS, settings);\n\n    const rawValue = this.getRawValue(maskedValue, opts);\n    return {\n      maskedText: maskedValue.replace(opts.suffixUnit, ''),\n      rawText: rawValue,\n    };\n  }\n\n  normalizeValue(maskedValue, settings) {\n    if (typeof maskedValue === 'number') {\n      return maskedValue;\n    }\n\n    const mergedSettings = super.mergeSettings(MONEY_MASK_SETTINGS, settings);\n    const cleaned = super\n      .removeNotNumbersForMoney(maskedValue)\n      .toString()\n      .split(mergedSettings.separator);\n\n    // if seperator and delimeter are the same we cannot use the way we did before\n    // this should not happen but if happens for some reason we will try to find decimals\n    if (mergedSettings.separator === mergedSettings.delimiter) {\n      if (cleaned.length === 1) {\n        return cleaned[0];\n      }\n\n      const lastPart = cleaned.pop();\n      const isLastPartDecimal = lastPart.length <= mergedSettings.precision;\n\n      return cleaned.join('') + (isLastPartDecimal ? '.' + lastPart : lastPart);\n    }\n\n    return cleaned.join('').replace(mergedSettings.delimiter, '.');\n  }\n\n  getRawValueForMask(maskedValue, settings) {\n    const normalized = this.normalizeValue(maskedValue, settings);\n\n    if (normalized === '') {\n      return '';\n    }\n\n    return normalized;\n  }\n\n  getRawValue(maskedValue, settings) {\n    const mergedSettings = super.mergeSettings(MONEY_MASK_SETTINGS, settings);\n    const normalized = this.normalizeValue(maskedValue, mergedSettings);\n    return Number(normalized);\n  }\n\n  validate(value, settings) {\n    return true;\n  }\n\n  _sanitize(value, settings) {\n    if (typeof value === 'number') {\n      return value.toFixed(settings.precision);\n    }\n\n    return value;\n  }\n\n  _insert(text, index, string) {\n    if (index > 0) {\n      return (\n        text.substring(0, index) + string + text.substring(index, text.length)\n      );\n    } else {\n      return string + text;\n    }\n  }\n}\n"]}