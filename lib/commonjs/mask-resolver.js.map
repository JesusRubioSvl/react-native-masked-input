{"version":3,"sources":["mask-resolver.js"],"names":["maskKeys","Object","keys","Masks","MaskResolver","resolve","type","maskKey","find","m","handler","getType","Error"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAIA,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYC,KAAZ,CAAf;;AAEe,MAAMC,YAAN,CAAmB;AAChC,SAAOC,OAAP,CAAeC,IAAf,EAAqB;AACnB,QAAIC,OAAO,GAAGP,QAAQ,CAACQ,IAAT,CAAeC,CAAD,IAAO;AACjC,UAAIC,OAAO,GAAGP,KAAK,CAACM,CAAD,CAAnB;AACA,aAAOC,OAAO,IAAIA,OAAO,CAACC,OAAnB,IAA8BD,OAAO,CAACC,OAAR,OAAsBL,IAA3D;AACD,KAHa,CAAd;AAKA,QAAII,OAAO,GAAGP,KAAK,CAACI,OAAD,CAAnB;;AAEA,QAAI,CAACG,OAAL,EAAc;AACZ,YAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,WAAO,IAAIF,OAAJ,EAAP;AACD;;AAd+B","sourcesContent":["import * as Masks from './masks';\n\nvar maskKeys = Object.keys(Masks);\n\nexport default class MaskResolver {\n  static resolve(type) {\n    let maskKey = maskKeys.find((m) => {\n      var handler = Masks[m];\n      return handler && handler.getType && handler.getType() === type;\n    });\n\n    let handler = Masks[maskKey];\n\n    if (!handler) {\n      throw new Error('Mask type not supported.');\n    }\n\n    return new handler();\n  }\n}\n"]}